'use strict';

const testState = {
    total: 0,
    passed: 0,
    failed: 0,
    skipped: 0,
    results: {},
    startTime: null,
    endTime: null,
    logs: []
};

const logger = {
    log(msg, type = 'info') {
        const timestamp = new Date().toLocaleTimeString('ru-RU');
        const logEntry = `[${timestamp}] ${msg}`;
        testState.logs.push({ msg: logEntry, type });
        this.display(logEntry, type);
    },
    
    success(msg) { this.log('‚úÖ ' + msg, 'info'); },
    error(msg) { this.log('‚ùå ' + msg, 'error'); },
    warn(msg) { this.log('‚ö†Ô∏è ' + msg, 'warn'); },
    info(msg) { this.log('‚ÑπÔ∏è ' + msg, 'info'); },
    debug(msg) { this.log('üîç ' + msg, 'debug'); },
    
    display(msg, type) {
        const console = document.getElementById('console-output');
        if (!console) return;
        
        const div = document.createElement('div');
        div.className = `log ${type}`;
        div.textContent = msg;
        console.appendChild(div);
        console.scrollTop = console.scrollHeight;
    },
    
    clear() {
        const console = document.getElementById('console-output');
        if (console) console.innerHTML = '';
        testState.logs = [];
    }
};

const assert = {
    equal(actual, expected, msg) {
        if (actual !== expected) {
            throw new Error(`${msg}\n–û–∂–∏–¥–∞–ª–æ—Å—å: ${expected}\n–ü–æ–ª—É—á–µ–Ω–æ: ${actual}`);
        }
    },
    
    notEqual(actual, expected, msg) {
        if (actual === expected) {
            throw new Error(`${msg}\n–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: ${expected}`);
        }
    },
    
    true(value, msg) {
        if (value !== true) {
            throw new Error(`${msg}\n–û–∂–∏–¥–∞–ª–æ—Å—å: true\n–ü–æ–ª—É—á–µ–Ω–æ: ${value}`);
        }
    },
    
    false(value, msg) {
        if (value !== false) {
            throw new Error(`${msg}\n–û–∂–∏–¥–∞–ª–æ—Å—å: false\n–ü–æ–ª—É—á–µ–Ω–æ: ${value}`);
        }
    },
    
    exists(value, msg) {
        if (!value) {
            throw new Error(`${msg}\n–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å`);
        }
    },
    
    notExists(value, msg) {
        if (value) {
            throw new Error(`${msg}\n–ó–ΩÔøΩÔøΩ—á–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å`);
        }
    },
    
    includes(arr, value, msg) {
        if (!Array.isArray(arr) || !arr.includes(value)) {
            throw new Error(`${msg}\n–ú–∞—Å—Å–∏–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç: ${value}`);
        }
    },
    
    isNumber(value, msg) {
        if (typeof value !== 'number' || isNaN(value)) {
            throw new Error(`${msg}\n–û–∂–∏–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ, –ø–æ–ª—É—á–µ–Ω–æ: ${typeof value}`);
        }
    },
    
    isString(value, msg) {
        if (typeof value !== 'string') {
            throw new Error(`${msg}\n–û–∂–∏–¥–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫–∞, –ø–æ–ª—É—á–µ–Ω–æ: ${typeof value}`);
        }
    },
    
    isObject(value, msg) {
        if (typeof value !== 'object' || value === null) {
            throw new Error(`${msg}\n–û–∂–∏–¥–∞–ª–æ—Å—å –æ–±—ä–µ–∫—Ç`);
        }
    },
    
    isArray(value, msg) {
        if (!Array.isArray(value)) {
            throw new Error(`${msg}\n–û–∂–∏–¥–∞–ª–æ—Å—å –º–∞—Å—Å–∏–≤`);
        }
    },
    
    throws(fn, msg) {
        try {
            fn();
            throw new Error(`${msg}\n–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É`);
        } catch(e) {
            if (e.message.includes('–¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞')) throw e;
        }
    },
    
    doesNotThrow(fn, msg) {
        try {
            fn();
        } catch(e) {
            throw new Error(`${msg}\n–§—É–Ω–∫—Ü–∏—è –≤—ã–±—Ä–æ—Å–∏–ª–∞ –æ—à–∏–±–∫—É: ${e.message}`);
        }
    }
};

const tests = {
    async test1() {
        logger.info('–¢–µ—Å—Ç 1: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
        assert.exists(document.getElementById('uso-add-variant'), '–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞');
        assert.exists(document.getElementById('uso-variants-bar'), '–ü–∞–Ω–µ–ª—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
        logger.success('–¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test2() {
        logger.info('–¢–µ—Å—Ç 2: –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        const key = 'uso_autosave_test';
        const testData = { test: 'data', timestamp: Date.now() };
        
        try {
            localStorage.setItem(key, JSON.stringify(testData));
            const retrieved = JSON.parse(localStorage.getItem(key));
            assert.equal(retrieved.test, 'data', '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
            localStorage.removeItem(key);
            logger.success('–¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω');
            return true;
        } catch(e) {
            logger.error('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ' + e.message);
            return false;
        }
    },
    
    async test3() {
        logger.info('–¢–µ—Å—Ç 3: –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç JSON');
        assert.exists(document.getElementById('uso-export-json'), '–ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON');
        assert.exists(document.getElementById('uso-import-json'), '–ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ JSON');
        
        const testJson = {
            v: 2,
            items: [
                { v: 2, t: 'point', m: 'blue_dot', nx: 0.5, ny: 0.5, sz: 1 }
            ],
            meta: { w: 800, h: 600, mid: 0.5 }
        };
        
        assert.isNumber(testJson.v, '–í–µ—Ä—Å–∏—è JSON');
        assert.isArray(testJson.items, '–ú–∞—Å—Å–∏–≤ items');
        assert.isObject(testJson.meta, '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ');
        
        logger.success('–¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test4() {
        logger.info('–¢–µ—Å—Ç 4: –†–∞—Å—á—ë—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏');
        assert.exists(document.getElementById('uso-sum-therapy'), '–°—É–º–º–∞ —Ç–µ—Ä–∞–ø–∏–∏');
        assert.exists(document.getElementById('uso-info-mc'), '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è MC');
        assert.exists(document.getElementById('uso-info-zr'), '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ZR');
        logger.success('–¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test5() {
        logger.info('–¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        assert.exists(document.getElementById('uso-file'), 'Input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
        const input = document.getElementById('uso-file');
        assert.equal(input.type, 'file', '–¢–∏–ø input - file');
        logger.success('–¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test6() {
        logger.info('–¢–µ—Å—Ç 6: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–∞–Ω–æ—Ä–∞–º–∞');
        assert.exists(document.getElementById('uso-canvas'), 'Canvas —ç–ª–µ–º–µ–Ω—Ç');
        assert.exists(document.getElementById('uso-fullscreen'), '–ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–∞');
        logger.success('–¢–µ—Å—Ç 6 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test7() {
        logger.info('–¢–µ—Å—Ç 7: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤');
        const shapes = ['point', 'cross', 'line', 'oval', 'q', 'exc', 'free'];
        shapes.forEach(shape => {
            const btn = document.querySelector(`[data-shape="${shape}"]`);
            assert.exists(btn, `–ö–Ω–æ–ø–∫–∞ –¥–ª—è ${shape}`);
        });
        logger.success('–¢–µ—Å—Ç 7 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test8() {
        logger.info('–¢–µ—Å—Ç 8: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤');
        assert.exists(document.getElementById('uso-undo'), '–ö–Ω–æ–ø–∫–∞ Undo');
        assert.exists(document.getElementById('uso-del'), '–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        assert.exists(document.getElementById('marker-size'), '–°–ª–∞–π–¥–µ—Ä —Ä–∞–∑–º–µ—Ä–∞');
        logger.success('–¢–µ—Å—Ç 8 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test9() {
        logger.info('–¢–µ—Å—Ç 9: –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è');
        const btn = document.getElementById('img-rotate');
        assert.exists(btn, '–ö–Ω–æ–ø–∫–∞ —Å—Ä–µ–¥–Ω–µ–π –ª–∏–Ω–∏–∏');
        logger.success('–¢–µ—Å—Ç 9 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test10() {
        logger.info('–¢–µ—Å—Ç 10: –≠–∫—Å–ø–æ—Ä—Ç PDF');
        assert.exists(document.getElementById('uso-pdf'), '–ö–Ω–æ–ø–∫–∞ PDF');
        assert.exists(document.getElementById('uso-patient-name'), '–ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞');
        assert.exists(document.getElementById('uso-patient-phone'), '–ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        logger.success('–¢–µ—Å—Ç 10 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test11() {
        logger.info('–¢–µ—Å—Ç 11: –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
        assert.exists(document.getElementById('uso-results'), '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        logger.success('–¢–µ—Å—Ç 11 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test12() {
        logger.info('–¢–µ—Å—Ç 12: –í—ã–±–æ—Ä –ø—Ä–æ—Ç–µ–∑–æ–≤');
        assert.exists(document.getElementById('uso-prost-matrix'), '–ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–æ—Ç–µ–∑–æ–≤');
        logger.success('–¢–µ—Å—Ç 12 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test13() {
        logger.info('–¢–µ—Å—Ç 13: –í—ã–±–æ—Ä –∏–º–ø–ª–∞–Ω—Ç–æ–≤');
        const implOpts = document.querySelector('.impl-opts');
        assert.exists(implOpts, '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–ø—Ü–∏–π –∏–º–ø–ª–∞–Ω—Ç–æ–≤');
        logger.success('–¢–µ—Å—Ç 13 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test14() {
        logger.info('–¢–µ—Å—Ç 14: –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
        assert.exists(document.getElementById('uso-note-therapy'), '–ü–æ–ª–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è —Ç–µ—Ä–∞–ø–∏–∏');
        assert.exists(document.getElementById('uso-note-crowns'), '–ü–æ–ª–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫–æ—Ä–æ–Ω–æ–∫');
        assert.exists(document.getElementById('uso-note-implants'), '–ü–æ–ª–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–º–ø–ª–∞–Ω—Ç–æ–≤');
        logger.success('–¢–µ—Å—Ç 14 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test15() {
        logger.info('–¢–µ—Å—Ç 15: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
        assert.exists(document.getElementById('uso-compare-variants'), '–ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
        logger.success('–¢–µ—Å—Ç 15 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test16() {
        logger.info('–¢–µ—Å—Ç 16: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥');
        if (window.USO && window.USO.util && window.USO.util.money) {
            const formatted = window.USO.util.money(1000);
            assert.isString(formatted, 'money() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É');
            logger.debug(`1000 ‚Üí "${formatted}"`);
        }
        logger.success('–¢–µ—Å—Ç 16 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test17() {
        logger.info('–¢–µ—Å—Ç 17: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        const phoneInput = document.getElementById('uso-patient-phone');
        assert.exists(phoneInput, '–ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        assert.equal(phoneInput.type, 'tel', '–¢–∏–ø tel');
        logger.success('–¢–µ—Å—Ç 17 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test18() {
        logger.info('–¢–µ—Å—Ç 18: –≠–∫—Å–ø–æ—Ä—Ç TXT');
        assert.exists(document.getElementById('uso-txt'), '–ö–Ω–æ–ø–∫–∞ TXT');
        logger.success('–¢–µ—Å—Ç 18 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test19() {
        logger.info('–¢–µ—Å—Ç 19: –≠–∫—Å–ø–æ—Ä—Ç PNG');
        assert.exists(document.getElementById('uso-png'), '–ö–Ω–æ–ø–∫–∞ PNG');
        logger.success('–¢–µ—Å—Ç 19 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async test20() {
        logger.info('–¢–µ—Å—Ç 20: –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–π (Undo)');
        const undoBtn = document.getElementById('uso-undo');
        assert.exists(undoBtn, '–ö–Ω–æ–ø–∫–∞ Undo');
        logger.success('–¢–µ—Å—Ç 20 –ø—Ä–æ–π–¥–µ–Ω');
        return true;
    },
    
    async perf() {
        logger.info('–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 100 –º–∞—Ä–∫–µ—Ä–æ–≤');
        const startTime = performance.now();
        
        for (let i = 0; i < 100; i++) {
            Math.random();
        }
        
        const endTime = performance.now();
        const duration = endTime - startTime;
        
        logger.info(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)}ms`);
        
        if (duration < 1000) {
            logger.success('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è');
            return true;
        } else {
            logger.warn('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞');
            return true;
        }
    },
    
    async memory() {
        logger.info('–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏');
        
        if (performance.memory) {
            const memory = performance.memory;
            logger.debug(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç–∏: ${(memory.usedJSHeapSize / 1048576).toFixed(2)} MB`);
            logger.debug(`–õ–∏–º–∏—Ç: ${(memory.jsHeapSizeLimit / 1048576).toFixed(2)} MB`);
            logger.success('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∞');
            return true;
        } else {
            logger.warn('performance.memory –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            return true;
        }
    },
    
    async compat() {
        logger.info('–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤');
        
        const checks = {
            'Canvas API': typeof HTMLCanvasElement !== 'undefined',
            'localStorage': typeof localStorage !== 'undefined',
            'Fetch API': typeof fetch !== 'undefined',
            'Promise': typeof Promise !== 'undefined',
            'ResizeObserver': typeof ResizeObserver !== 'undefined',
            'FileReader': typeof FileReader !== 'undefined'
        };
        
        let allSupported = true;
        for (const [feature, supported] of Object.entries(checks)) {
            if (supported) {
                logger.debug(`‚úÖ ${feature}`);
            } else {
                logger.warn(`‚ùå ${feature}`);
                allSupported = false;
            }
        }
        
        if (allSupported) {
            logger.success('–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
        } else {
            logger.warn('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
        }
        
        return allSupported;
    },
    
    async security() {
        logger.info('–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (XSS)');
        
        if (window.USO && window.USO.util) {
            const xssPayload = '<img src=x onerror="alert(\'XSS\')">';
            
            if (window.USO.util.escapeHTML) {
                const escaped = window.USO.util.escapeHTML(xssPayload);
                assert.notEqual(escaped, xssPayload, 'HTML —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω');
                logger.debug(`–ò—Å—Ö–æ–¥–Ω–∞—è: ${xssPayload}`);
                logger.debug(`–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: ${escaped}`);
                logger.success('XSS –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                return true;
            }
        }
        
        logger.warn('–§—É–Ω–∫—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return true;
    }
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è runTest —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function runTest(testName) {
    console.log(`\n[TEST] ========== STARTING TEST: ${testName} ==========`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è —Ç–µ—Å—Ç–∞ –≤ ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    let resultId = `result-${testName}`;
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç —Ç–∏–ø–∞ test1, test2 –∏ —Ç.–¥., –∏—â–µ–º result-1, result-2
    if (testName.match(/^test\d+$/)) {
        const num = testName.replace('test', '');
        resultId = `result-${num}`;
        console.log(`[TEST] Detected numeric test: ${testName} ‚Üí ${resultId}`);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç (perf, memory, compat, security)
    if (['perf', 'memory', 'compat', 'security'].includes(testName)) {
        resultId = `result-${testName}`;
        console.log(`[TEST] Detected special test: ${testName} ‚Üí ${resultId}`);
    }
    
    console.log(`[TEST] Looking for element: #${resultId}`);
    const result = document.getElementById(resultId);
    
    if (!result) {
        console.error(`[TEST] ‚ùå Result element NOT FOUND: ${resultId}`);
        console.log('[TEST] Available elements:', 
            Array.from(document.querySelectorAll('[id^="result-"]'))
                .map(el => `${el.id} (${el.className})`)
                .join(', ')
        );
        console.log('[TEST] All test cards:', 
            Array.from(document.querySelectorAll('[id^="test-"]'))
                .map(el => el.id)
                .join(', ')
        );
        logger.error(`Element #${resultId} not found`);
        testState.failed++;
        updateSummary();
        console.log(`[TEST] ========== END TEST: ${testName} (FAILED - NO ELEMENT) ==========\n`);
        return;
    }
    
    console.log(`[TEST] ‚úÖ Element found: ${resultId}`);
    result.classList.remove('show', 'success', 'error', 'warning', 'info');
    result.innerHTML = '<span class="status-indicator pending"></span>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
    result.classList.add('show');
    
    try {
        console.log(`[TEST] Looking for test function: tests.${testName}`);
        const testFn = tests[testName];
        
        if (!testFn) {
            console.error(`[TEST] ‚ùå Test function NOT FOUND: ${testName}`);
            console.log('[TEST] Available tests:', Object.keys(tests).join(', '));
            throw new Error(`–¢–µ—Å—Ç ${testName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–µ tests`);
        }
        
        console.log(`[TEST] ‚úÖ Test function found, executing...`);
        const success = await testFn();
        
        console.log(`[TEST] Test ${testName} result: ${success ? 'PASS' : 'FAIL'}`);
        
        if (success !== false) {
            testState.passed++;
            result.innerHTML = '<span class="status-indicator pass"></span>‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω';
            result.classList.add('success');
            console.log(`[TEST] ‚úÖ ${testName} PASSED`);
        } else {
            testState.failed++;
            result.innerHTML = '<span class="status-indicator fail"></span>‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω';
            result.classList.add('error');
            console.log(`[TEST] ‚ùå ${testName} FAILED`);
        }
    } catch(err) {
        testState.failed++;
        console.error(`[TEST] ‚ùå ${testName} ERROR:`, err);
        logger.error(`${testName}: ${err.message}`);
        result.innerHTML = `<span class="status-indicator fail"></span>‚ùå –û—à–∏–±–∫–∞: ${err.message}`;
        result.classList.add('error');
    }
    
    console.log(`[TEST] ========== END TEST: ${testName} ==========\n`);
    updateSummary();
}

async function runAllTests() {
    logger.clear();
    testState.passed = 0;
    testState.failed = 0;
    testState.skipped = 0;
    testState.startTime = Date.now();
    
    console.log('\n' + '='.repeat(80));
    console.log('üß™ STARTING FULL TEST SUITE');
    console.log('='.repeat(80) + '\n');
    
    logger.info('=== –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ù–ê–ë–û–†–ê –¢–ï–°–¢–û–í ===');
    
    const testKeys = Object.keys(tests);
    console.log(`[TEST] Found ${testKeys.length} tests:`, testKeys.join(', '));
    testState.total = testKeys.length;
    
    for (const testKey of testKeys) {
        console.log(`\n[TEST] Processing test: ${testKey}`);
        await runTest(testKey);
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    testState.endTime = Date.now();
    const duration = (testState.endTime - testState.startTime) / 1000;
    
    console.log('\n' + '='.repeat(80));
    console.log('üß™ TEST SUITE COMPLETED');
    console.log('='.repeat(80));
    console.log(`Total: ${testState.total}, Passed: ${testState.passed}, Failed: ${testState.failed}`);
    console.log(`Duration: ${duration.toFixed(2)}s\n`);
    
    logger.info(`=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===`);
    logger.info(`–í—Å–µ–≥–æ: ${testState.total}, –ü—Ä–æ–π–¥–µ–Ω–æ: ${testState.passed}, –û—à–∏–±–æ–∫: ${testState.failed}`);
    logger.info(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)}s`);
    
    updateSummary();
}

function updateSummary() {
    const totalEl = document.getElementById('total-tests');
    const passedEl = document.getElementById('passed-tests');
    const failedEl = document.getElementById('failed-tests');
    const skippedEl = document.getElementById('skipped-tests');
    
    if (totalEl) totalEl.textContent = testState.total;
    if (passedEl) passedEl.textContent = testState.passed;
    if (failedEl) failedEl.textContent = testState.failed;
    if (skippedEl) skippedEl.textContent = testState.skipped;
}

function clearResults() {
    document.querySelectorAll('.result').forEach(el => {
        el.classList.remove('show');
        el.innerHTML = '';
    });
    logger.clear();
    testState.passed = 0;
    testState.failed = 0;
    testState.skipped = 0;
    testState.total = 0;
    updateSummary();
}

function downloadReport() {
    const report = {
        timestamp: new Date().toISOString(),
        summary: {
            total: testState.total,
            passed: testState.passed,
            failed: testState.failed,
            skipped: testState.skipped
        },
        logs: testState.logs,
        userAgent: navigator.userAgent,
        url: window.location.href
    };
    
    const json = JSON.stringify(report, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `uso-test-report-${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    logger.success('–û—Ç—á—ë—Ç —Å–∫–∞—á–∞–Ω');
}

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function(){
    console.log('[TEST] DOM ready');
    const updateTimeEl = document.getElementById('update-time');
    if (updateTimeEl) {
        updateTimeEl.textContent = new Date().toLocaleString('ru-RU');
    }
    logger.info('–¢–µ—Å—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    logger.info('–ë—Ä–∞—É–∑–µ—Ä: ' + navigator.userAgent);
    console.log('[TEST] Test system ready. Use runAllTests() or runTest(testName)');
});